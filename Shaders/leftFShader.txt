#version 330 core
precision highp float;

in vec4 gl_FragCoord;
out vec4 fragColor;

uniform float max_iterations;
uniform float time;
uniform float zoom;
uniform vec2 resolution;
uniform vec2 cursorPos;

#define eR 100.0



float calc(vec2 z, vec2 c)
{
    for(int i = 0; i < max_iterations; i++)
    {
        float real = z.x * z.x - z.y * z.y + c.x;
        float imag = 2.0 * z.x * z.y + c.y;
        
        z.x = real;
        z.y = imag;
        
        if(dot(z, z) > eR)
        {
            float temp = float(i) - log2(log2(dot(z, z))) + 4.0;
            return temp / float(max_iterations);
        }
    }
    return 0.0;
}


float mandelCalc(vec2 coordinate)
{
    vec2 c = vec2(coordinate.x, coordinate.y);
    return calc(vec2(0.0), c);
}

void main()
{
    vec2 coord  = 2.0 * vec2((2.0 * gl_FragCoord.x - resolution.x / 2.0) / resolution.y - 0.25, (2.0 * gl_FragCoord.y - resolution.y) / resolution.y);
    
    
    float mandelValue = mandelCalc(coord);
    
    vec3 color = vec3(cos(mandelValue * 20.0 + 3.0), cos(mandelValue * 35.0 + 2.8), cos(mandelValue * 40.0 + 4.0));
    fragColor = vec4(color, 1.0);
}