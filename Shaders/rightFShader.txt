#version 330 core
precision highp float;

in vec4 gl_FragCoord;
out vec4 fragColor;

uniform float max_iterations;
uniform float time;
uniform float zoom;
uniform vec2 resolution;
uniform vec2 cursorPos;

#define eR 1000.0

float calc(vec2 z, vec2 c)
{
    for(int i = 0; i < max_iterations; i++)
    {
        float real = z.x * z.x - z.y * z.y + c.x;
        float imag = 2.0 * z.x * z.y + c.y;
        z.x = real;
        z.y = imag;
        if(dot(z, z) > eR)
        {
            float temp = float(i) - log2(log2(dot(z, z))) + 4.0;
            return temp / float(max_iterations);
        }
    }
    return 0.0;
}

float juliaCalc(vec2 coordinate, vec2 cCoord)
{
    vec2 z = vec2(coordinate.x, coordinate.y);
    vec2 c = vec2(cCoord.x, cCoord.y);
    return calc(z, c);
}

void main()
{
    vec2 coord           = 2.0 * vec2((2.0 * gl_FragCoord.x - (resolution.x / 2.0)) / resolution.y - 1.78, (2.0 * gl_FragCoord.y - resolution.y) / resolution.y);
    vec2 actualCursorPos = vec2(0.0, 0.0);
    if(cursorPos.x < resolution.x / 2.0)
    {
        actualCursorPos = 2.0 * vec2(((2.0 * cursorPos.x - (resolution.x / 2.0)) / resolution.y - 0.25), ((2.0 * cursorPos.y - resolution.y) / resolution.y));
    }else
    {
        actualCursorPos = vec2(0.0, 0.0);
    }
    float juliaValue = juliaCalc(coord, actualCursorPos);
    vec3 color = vec3(cos(juliaValue * 20.0 + 3.0), cos(juliaValue * 35.0 + 2.8), cos(juliaValue * 40.0 + 4.0));
    fragColor = vec4(color, 1.0);
}